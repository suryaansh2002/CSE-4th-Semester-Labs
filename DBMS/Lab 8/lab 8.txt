
2.
CREATE OR REPLACE PROCEDURE listInst (deptName Instructor.dept_name%type) IS
CURSOR curseInst (deptName Instructor.dept_name%type) IS
SELECT name FROM Instructor WHERE dept_name = deptName;
CURSOR cCourses (deptName Instructor.dept_name%type) IS
SELECT course_id FROM Course WHERE dept_name = deptName;
BEGIN
    dbms_output.put_line('DEPARTMENTs INSTRUCTORS');
    FOR row IN curseInst (deptName)
    LOOP
        dbms_output.put_line(' '||row.name);
    END LOOP;
    dbms_output.put_line('COURSES');
    FOR row IN cCourses (deptName) LOOP
        dbms_output.put_line(' ' || row.course_id);
    END LOOP;
END;
/

DECLARE
BEGIN
listInst('Comp. Sci.');
END;
/

3.
CREATE OR REPLACE PROCEDURE course_popular IS
CURSOR cursepop IS
WITH studentenroll as (select course_id,count(distinct ID) as student_count from takes group by course_id),
studenmod as (select course_id,student_count,dept_name from studentenroll natural join course),
deptmax as (select max(student_count) as dept_high,dept_name from course natural join studenmod group by dept_name)
select dept_high,course_id,dept_name from studenmod natural join deptmax where student_count=dept_high;
BEGIN
    FOR row IN cursepop LOOP
        dbms_output.put_line('Department name : '||row.dept_name);
        dbms_output.put_line(' Course ID : ' || row.course_id);
        dbms_output.put_line('Number of student enrolled : '||row.dept_high);
    
    END LOOP;
END;
/

DECLARE
BEGIN
    
    course_popular;
END;
/

5.
CREATE OR REPLACE FUNCTION square (x number)
RETURN number AS s number;
BEGIN
    s := x * x;
    RETURN s;
END;
/

DECLARE
BEGIN
    dbms_output.put_line('5 ^ 2 = '||square(5));
END;
/

6.

CREATE OR REPLACE FUNCTION department_highest (dName Department.dept_name%type)
RETURN Instructor.salary%type as
pop Instructor.salary%type;
BEGIN
    select max(salary) into pop 
    from Instructor group by Instructor.dept_name having Instructor.dept_name in (select dept_name 
                                                                                  from Instructor 
                                                                                  where dept_name = dName);
    return pop;
END;
/

DECLARE
    maxs Instructor.salary%type;
    cursor c1 is select distinct dept_name from department;
BEGIN
    for dn in c1 loop
        maxs := department_highest(dn.dept_name);
        dbms_output.put_line('Highest paid salary in '||dn.dept_name||' is : ' || maxs);
end loop;
END;
/


\
TRIGGERS

1.
create table log_change_Takes (
        toc timestamp,
        type varchar(3),
        ID varchar(5),
        course_id varchar(8),
        sec_id varchar(8),
        semester varchar(6),
        year numeric(4,0),
        grade varchar(2),
        primary key (toc, ID, course_id, sec_id, semester, year),
        foreign key (course_id,sec_id, semester, year) references section
        on delete cascade,
        foreign key (ID) references student
        on delete cascade);
CREATE or REPLACE trigger log_change_Takes
BEFORE INSERT OR UPDATE
OR DELETE on takes
FOR EACH ROW
BEGIN
    CASE
        WHEN INSERTING THEN
        insert into log_change_Takes values (current_timestamp,'ins',:NEW.id,:NEW.course_id,:NEW.sec_id,:NEW.semester,:NEW.year,:NEW.grade);
        WHEN DELETING THEN
        insert into log_change_Takes values (current_timestamp,'del',:OLD.id,:OLD.course_id,:OLD.sec_id,:OLD.semester,:OLD.year,:OLD.grade);
        WHEN UPDATING THEN
        insert into log_change_Takes values (current_timestamp,'upd',:NEW.id,:NEW.course_id,:NEW.sec_id,:NEW.semester,:NEW.year,:NEW.grade);
    END CASE;
END;
/


delete from takes where id = '00128' and course_id = 'CS-101';
insert into takes values ('00128', 'CS-101', '1', 'Fall', '2009', 'A');
update takes set grade = 'B' where id = '98988' and course_id = 'BIO-301';

select * from log_change_Takes;


2.
create table old_data_inst(
    id varchar(8),
    name varchar(20),
    dept_name varchar(20),
    salary numeric(8,2),
    primary key (id));
create or replace trigger old_data_inst
Before update on instructor for each row
begin
    insert into old_data_inst values (:old.id,:old.name,:old.dept_name,:old.salary);
end;
/

update instructor set salary = 91000 where name = 'Wu';

select * from old_data_inst;

3.

CREATE or REPLACE TRIGGER Inst_trig
BEFORE INSERT or UPDATE on Instructor
FOR EACH ROW
DECLARE
bud number(10);
BEGIN
Select budget into bud from department where dept_name=:new.dept_name;
IF :new.name like '%0%' or :new.name like '%1%' or :new.name like '%2%' or :new.name like '%3%' or :new.name like '%4%'
or :new.name like '%5%' or :new.name like '%6%' or :new.name like '%7%' or :new.name like '%8%' or :new.name like '%9%' then
RAISE_APPLICATION_ERROR(-20000,'Insert is denied');
END IF;
IF :new.salary<=0 or :new.salary>bud then
RAISE_APPLICATION_ERROR(-20000,'Insert is denied');
END IF;
END;
/

4.

CREATE table client(
    c_no varchar(5) primary key,
    name varchar(20),
    address varchar(100),
    bal_due number);

insert into client values ('01', 'Ayush','Kolkata',10000);
insert into client values ('02', 'Dipesh','Delhi',20000);
insert into client values ('03', 'Rishav','Jaipur',30000);

create table audit_client(
    c_no varchar(5),
    name varchar(20),
    bal_due number,
    op varchar(3),
    user_id varchar(5) default('00000'),
    opDate date);

create or replace trigger client_audit
BEFORE UPDATE or INSERT on client
FOR EACH ROW
begin
    case
        WHEN UPDATING THEN
            insert into audit_client values (:OLD.c_no,:OLD.name,:OLD.bal_due,'upd',NULL,sysdate);
        WHEN DELETING THEN
            insert into audit_client values (:OLD.c_no,:OLD.name,:OLD.bal_due,'del',NULL,sysdate);
    end case;
end;
/

5.

create view Advisor_Student as select s.name s_name, a.S_ID, a.I_ID, i.name i_name from student s, advisor a, instructor i 
where a.S_ID = s.ID and a.I_ID = i.ID;

create or replace trigger advisor_trigger
instead of delete on Advisor_Student
for each row
begin
delete from advisor where advisor.S_ID = :old.S_ID;
end;
/

delete from Advisor_Student where S_ID = '98988';



